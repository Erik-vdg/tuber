name: Release

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'frontend/**'
    - 'backend/**'

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'frontend/**'
          - 'backend/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: hadolint
      uses: reviewdog/action-hadolint@v1.19.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        filter_mode: diff_context
        fail_on_error: true

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - hadolint
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2


    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        if test -f "./frontend/Dockerfile"; then
          CATEGORY="frontend"
        else
          CATEGORY="backend"
        fi
        echo ::set-output name=category::${CATEGORY}
        VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        echo ::set-output name=version::${VERSION}
        PLATFORM=$(cat ./${CATEGORY}/${{ matrix.container }}/PLATFORM)
        echo ::set-output name=platform::${PLATFORM}
        if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
          echo ::set-output name=goss::true
        else
          echo ::set-output name=goss::false
        fi
        if [ "${{github.event_name}}" == "pull_request" ]; then
          echo ::set-output name=push::false
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache" || echo ::set-output name=cache_from::""
          echo ::set-output name=cache_to::""
        else
          echo ::set-output name=push::true
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache"
          echo ::set-output name=cache_to::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache,mode=max"
        fi